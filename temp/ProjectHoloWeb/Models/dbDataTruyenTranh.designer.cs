#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ProjectHoloWeb.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="TruyenTranh")]
	public partial class dbDataTruyenTranhDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAdmin(Admin instance);
    partial void UpdateAdmin(Admin instance);
    partial void DeleteAdmin(Admin instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertAuthor(Author instance);
    partial void UpdateAuthor(Author instance);
    partial void DeleteAuthor(Author instance);
    partial void InsertCatergory(Catergory instance);
    partial void UpdateCatergory(Catergory instance);
    partial void DeleteCatergory(Catergory instance);
    partial void InsertChapter(Chapter instance);
    partial void UpdateChapter(Chapter instance);
    partial void DeleteChapter(Chapter instance);
    partial void InsertComic(Comic instance);
    partial void UpdateComic(Comic instance);
    partial void DeleteComic(Comic instance);
    partial void InsertComicCatergory(ComicCatergory instance);
    partial void UpdateComicCatergory(ComicCatergory instance);
    partial void DeleteComicCatergory(ComicCatergory instance);
    partial void InsertComicTran(ComicTran instance);
    partial void UpdateComicTran(ComicTran instance);
    partial void DeleteComicTran(ComicTran instance);
    partial void InsertImageChapter(ImageChapter instance);
    partial void UpdateImageChapter(ImageChapter instance);
    partial void DeleteImageChapter(ImageChapter instance);
    partial void InsertPermission(Permission instance);
    partial void UpdatePermission(Permission instance);
    partial void DeletePermission(Permission instance);
    partial void InsertPermissionUser(PermissionUser instance);
    partial void UpdatePermissionUser(PermissionUser instance);
    partial void DeletePermissionUser(PermissionUser instance);
    partial void InsertTransPermission(TransPermission instance);
    partial void UpdateTransPermission(TransPermission instance);
    partial void DeleteTransPermission(TransPermission instance);
    partial void InsertTransTeam(TransTeam instance);
    partial void UpdateTransTeam(TransTeam instance);
    partial void DeleteTransTeam(TransTeam instance);
    #endregion
		
		public dbDataTruyenTranhDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["TruyenTranhConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public dbDataTruyenTranhDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dbDataTruyenTranhDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dbDataTruyenTranhDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dbDataTruyenTranhDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Admin> Admins
		{
			get
			{
				return this.GetTable<Admin>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<Author> Authors
		{
			get
			{
				return this.GetTable<Author>();
			}
		}
		
		public System.Data.Linq.Table<Catergory> Catergories
		{
			get
			{
				return this.GetTable<Catergory>();
			}
		}
		
		public System.Data.Linq.Table<Chapter> Chapters
		{
			get
			{
				return this.GetTable<Chapter>();
			}
		}
		
		public System.Data.Linq.Table<Comic> Comics
		{
			get
			{
				return this.GetTable<Comic>();
			}
		}
		
		public System.Data.Linq.Table<ComicCatergory> ComicCatergories
		{
			get
			{
				return this.GetTable<ComicCatergory>();
			}
		}
		
		public System.Data.Linq.Table<ComicTran> ComicTrans
		{
			get
			{
				return this.GetTable<ComicTran>();
			}
		}
		
		public System.Data.Linq.Table<ImageChapter> ImageChapters
		{
			get
			{
				return this.GetTable<ImageChapter>();
			}
		}
		
		public System.Data.Linq.Table<Permission> Permissions
		{
			get
			{
				return this.GetTable<Permission>();
			}
		}
		
		public System.Data.Linq.Table<PermissionUser> PermissionUsers
		{
			get
			{
				return this.GetTable<PermissionUser>();
			}
		}
		
		public System.Data.Linq.Table<TransPermission> TransPermissions
		{
			get
			{
				return this.GetTable<TransPermission>();
			}
		}
		
		public System.Data.Linq.Table<TransTeam> TransTeams
		{
			get
			{
				return this.GetTable<TransTeam>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Admin")]
	public partial class Admin : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _useradmin;
		
		private string _passadmin;
		
		private string _fullname;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnuseradminChanging(string value);
    partial void OnuseradminChanged();
    partial void OnpassadminChanging(string value);
    partial void OnpassadminChanged();
    partial void OnfullnameChanging(string value);
    partial void OnfullnameChanged();
    #endregion
		
		public Admin()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_useradmin", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string useradmin
		{
			get
			{
				return this._useradmin;
			}
			set
			{
				if ((this._useradmin != value))
				{
					this.OnuseradminChanging(value);
					this.SendPropertyChanging();
					this._useradmin = value;
					this.SendPropertyChanged("useradmin");
					this.OnuseradminChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_passadmin", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string passadmin
		{
			get
			{
				return this._passadmin;
			}
			set
			{
				if ((this._passadmin != value))
				{
					this.OnpassadminChanging(value);
					this.SendPropertyChanging();
					this._passadmin = value;
					this.SendPropertyChanged("passadmin");
					this.OnpassadminChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fullname", DbType="NVarChar(50)")]
		public string fullname
		{
			get
			{
				return this._fullname;
			}
			set
			{
				if ((this._fullname != value))
				{
					this.OnfullnameChanging(value);
					this.SendPropertyChanging();
					this._fullname = value;
					this.SendPropertyChanged("fullname");
					this.OnfullnameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _IDuser;
		
		private string _mail;
		
		private string _pass;
		
		private string _username;
		
		private System.Nullable<System.DateTime> _created;
		
		private System.Nullable<System.DateTime> _updated;
		
		private string _IDteam;
		
		private string _IDtransper;
		
		private EntitySet<PermissionUser> _PermissionUsers;
		
		private EntityRef<TransPermission> _TransPermission;
		
		private EntityRef<TransTeam> _TransTeam;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDuserChanging(string value);
    partial void OnIDuserChanged();
    partial void OnmailChanging(string value);
    partial void OnmailChanged();
    partial void OnpassChanging(string value);
    partial void OnpassChanged();
    partial void OnusernameChanging(string value);
    partial void OnusernameChanged();
    partial void OncreatedChanging(System.Nullable<System.DateTime> value);
    partial void OncreatedChanged();
    partial void OnupdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnupdatedChanged();
    partial void OnIDteamChanging(string value);
    partial void OnIDteamChanged();
    partial void OnIDtransperChanging(string value);
    partial void OnIDtransperChanged();
    #endregion
		
		public User()
		{
			this._PermissionUsers = new EntitySet<PermissionUser>(new Action<PermissionUser>(this.attach_PermissionUsers), new Action<PermissionUser>(this.detach_PermissionUsers));
			this._TransPermission = default(EntityRef<TransPermission>);
			this._TransTeam = default(EntityRef<TransTeam>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDuser", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string IDuser
		{
			get
			{
				return this._IDuser;
			}
			set
			{
				if ((this._IDuser != value))
				{
					this.OnIDuserChanging(value);
					this.SendPropertyChanging();
					this._IDuser = value;
					this.SendPropertyChanged("IDuser");
					this.OnIDuserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mail", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string mail
		{
			get
			{
				return this._mail;
			}
			set
			{
				if ((this._mail != value))
				{
					this.OnmailChanging(value);
					this.SendPropertyChanging();
					this._mail = value;
					this.SendPropertyChanged("mail");
					this.OnmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pass", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string pass
		{
			get
			{
				return this._pass;
			}
			set
			{
				if ((this._pass != value))
				{
					this.OnpassChanging(value);
					this.SendPropertyChanging();
					this._pass = value;
					this.SendPropertyChanged("pass");
					this.OnpassChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_username", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string username
		{
			get
			{
				return this._username;
			}
			set
			{
				if ((this._username != value))
				{
					this.OnusernameChanging(value);
					this.SendPropertyChanging();
					this._username = value;
					this.SendPropertyChanged("username");
					this.OnusernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_created", DbType="DateTime")]
		public System.Nullable<System.DateTime> created
		{
			get
			{
				return this._created;
			}
			set
			{
				if ((this._created != value))
				{
					this.OncreatedChanging(value);
					this.SendPropertyChanging();
					this._created = value;
					this.SendPropertyChanged("created");
					this.OncreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_updated", DbType="DateTime")]
		public System.Nullable<System.DateTime> updated
		{
			get
			{
				return this._updated;
			}
			set
			{
				if ((this._updated != value))
				{
					this.OnupdatedChanging(value);
					this.SendPropertyChanging();
					this._updated = value;
					this.SendPropertyChanged("updated");
					this.OnupdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDteam", DbType="VarChar(50)")]
		public string IDteam
		{
			get
			{
				return this._IDteam;
			}
			set
			{
				if ((this._IDteam != value))
				{
					if (this._TransTeam.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDteamChanging(value);
					this.SendPropertyChanging();
					this._IDteam = value;
					this.SendPropertyChanged("IDteam");
					this.OnIDteamChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDtransper", DbType="VarChar(50)")]
		public string IDtransper
		{
			get
			{
				return this._IDtransper;
			}
			set
			{
				if ((this._IDtransper != value))
				{
					if (this._TransPermission.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDtransperChanging(value);
					this.SendPropertyChanging();
					this._IDtransper = value;
					this.SendPropertyChanged("IDtransper");
					this.OnIDtransperChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_PermissionUser", Storage="_PermissionUsers", ThisKey="IDuser", OtherKey="IDuser")]
		public EntitySet<PermissionUser> PermissionUsers
		{
			get
			{
				return this._PermissionUsers;
			}
			set
			{
				this._PermissionUsers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TransPermission_User", Storage="_TransPermission", ThisKey="IDtransper", OtherKey="IDtransper", IsForeignKey=true)]
		public TransPermission TransPermission
		{
			get
			{
				return this._TransPermission.Entity;
			}
			set
			{
				TransPermission previousValue = this._TransPermission.Entity;
				if (((previousValue != value) 
							|| (this._TransPermission.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TransPermission.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._TransPermission.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._IDtransper = value.IDtransper;
					}
					else
					{
						this._IDtransper = default(string);
					}
					this.SendPropertyChanged("TransPermission");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TransTeam_User", Storage="_TransTeam", ThisKey="IDteam", OtherKey="IDteam", IsForeignKey=true)]
		public TransTeam TransTeam
		{
			get
			{
				return this._TransTeam.Entity;
			}
			set
			{
				TransTeam previousValue = this._TransTeam.Entity;
				if (((previousValue != value) 
							|| (this._TransTeam.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TransTeam.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._TransTeam.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._IDteam = value.IDteam;
					}
					else
					{
						this._IDteam = default(string);
					}
					this.SendPropertyChanged("TransTeam");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PermissionUsers(PermissionUser entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_PermissionUsers(PermissionUser entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Author")]
	public partial class Author : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _IDauthor;
		
		private string _author1;
		
		private System.Nullable<System.DateTime> _created;
		
		private System.Nullable<System.DateTime> _updated;
		
		private EntitySet<Comic> _Comics;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDauthorChanging(string value);
    partial void OnIDauthorChanged();
    partial void Onauthor1Changing(string value);
    partial void Onauthor1Changed();
    partial void OncreatedChanging(System.Nullable<System.DateTime> value);
    partial void OncreatedChanged();
    partial void OnupdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnupdatedChanged();
    #endregion
		
		public Author()
		{
			this._Comics = new EntitySet<Comic>(new Action<Comic>(this.attach_Comics), new Action<Comic>(this.detach_Comics));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDauthor", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string IDauthor
		{
			get
			{
				return this._IDauthor;
			}
			set
			{
				if ((this._IDauthor != value))
				{
					this.OnIDauthorChanging(value);
					this.SendPropertyChanging();
					this._IDauthor = value;
					this.SendPropertyChanged("IDauthor");
					this.OnIDauthorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="author", Storage="_author1", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string author1
		{
			get
			{
				return this._author1;
			}
			set
			{
				if ((this._author1 != value))
				{
					this.Onauthor1Changing(value);
					this.SendPropertyChanging();
					this._author1 = value;
					this.SendPropertyChanged("author1");
					this.Onauthor1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_created", DbType="DateTime")]
		public System.Nullable<System.DateTime> created
		{
			get
			{
				return this._created;
			}
			set
			{
				if ((this._created != value))
				{
					this.OncreatedChanging(value);
					this.SendPropertyChanging();
					this._created = value;
					this.SendPropertyChanged("created");
					this.OncreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_updated", DbType="DateTime")]
		public System.Nullable<System.DateTime> updated
		{
			get
			{
				return this._updated;
			}
			set
			{
				if ((this._updated != value))
				{
					this.OnupdatedChanging(value);
					this.SendPropertyChanging();
					this._updated = value;
					this.SendPropertyChanged("updated");
					this.OnupdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Author_Comic", Storage="_Comics", ThisKey="IDauthor", OtherKey="IDauthor")]
		public EntitySet<Comic> Comics
		{
			get
			{
				return this._Comics;
			}
			set
			{
				this._Comics.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Comics(Comic entity)
		{
			this.SendPropertyChanging();
			entity.Author = this;
		}
		
		private void detach_Comics(Comic entity)
		{
			this.SendPropertyChanging();
			entity.Author = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Catergory")]
	public partial class Catergory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _IDcatergory;
		
		private string _catergory1;
		
		private string _decriptions;
		
		private System.Nullable<System.DateTime> _created_at;
		
		private System.Nullable<System.DateTime> _update_at;
		
		private EntitySet<ComicCatergory> _ComicCatergories;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDcatergoryChanging(string value);
    partial void OnIDcatergoryChanged();
    partial void Oncatergory1Changing(string value);
    partial void Oncatergory1Changed();
    partial void OndecriptionsChanging(string value);
    partial void OndecriptionsChanged();
    partial void Oncreated_atChanging(System.Nullable<System.DateTime> value);
    partial void Oncreated_atChanged();
    partial void Onupdate_atChanging(System.Nullable<System.DateTime> value);
    partial void Onupdate_atChanged();
    #endregion
		
		public Catergory()
		{
			this._ComicCatergories = new EntitySet<ComicCatergory>(new Action<ComicCatergory>(this.attach_ComicCatergories), new Action<ComicCatergory>(this.detach_ComicCatergories));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDcatergory", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string IDcatergory
		{
			get
			{
				return this._IDcatergory;
			}
			set
			{
				if ((this._IDcatergory != value))
				{
					this.OnIDcatergoryChanging(value);
					this.SendPropertyChanging();
					this._IDcatergory = value;
					this.SendPropertyChanged("IDcatergory");
					this.OnIDcatergoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="catergory", Storage="_catergory1", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string catergory1
		{
			get
			{
				return this._catergory1;
			}
			set
			{
				if ((this._catergory1 != value))
				{
					this.Oncatergory1Changing(value);
					this.SendPropertyChanging();
					this._catergory1 = value;
					this.SendPropertyChanged("catergory1");
					this.Oncatergory1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_decriptions", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string decriptions
		{
			get
			{
				return this._decriptions;
			}
			set
			{
				if ((this._decriptions != value))
				{
					this.OndecriptionsChanging(value);
					this.SendPropertyChanging();
					this._decriptions = value;
					this.SendPropertyChanged("decriptions");
					this.OndecriptionsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_created_at", DbType="DateTime")]
		public System.Nullable<System.DateTime> created_at
		{
			get
			{
				return this._created_at;
			}
			set
			{
				if ((this._created_at != value))
				{
					this.Oncreated_atChanging(value);
					this.SendPropertyChanging();
					this._created_at = value;
					this.SendPropertyChanged("created_at");
					this.Oncreated_atChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_update_at", DbType="DateTime")]
		public System.Nullable<System.DateTime> update_at
		{
			get
			{
				return this._update_at;
			}
			set
			{
				if ((this._update_at != value))
				{
					this.Onupdate_atChanging(value);
					this.SendPropertyChanging();
					this._update_at = value;
					this.SendPropertyChanged("update_at");
					this.Onupdate_atChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Catergory_ComicCatergory", Storage="_ComicCatergories", ThisKey="IDcatergory", OtherKey="IDcatergory")]
		public EntitySet<ComicCatergory> ComicCatergories
		{
			get
			{
				return this._ComicCatergories;
			}
			set
			{
				this._ComicCatergories.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ComicCatergories(ComicCatergory entity)
		{
			this.SendPropertyChanging();
			entity.Catergory = this;
		}
		
		private void detach_ComicCatergories(ComicCatergory entity)
		{
			this.SendPropertyChanging();
			entity.Catergory = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Chapter")]
	public partial class Chapter : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _IDchapter;
		
		private string _chapter1;
		
		private string _IDcomic;
		
		private System.Nullable<System.DateTime> _created;
		
		private System.Nullable<System.DateTime> _update;
		
		private string _ImageLink;
		
		private EntitySet<ImageChapter> _ImageChapters;
		
		private EntityRef<Comic> _Comic;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDchapterChanging(string value);
    partial void OnIDchapterChanged();
    partial void Onchapter1Changing(string value);
    partial void Onchapter1Changed();
    partial void OnIDcomicChanging(string value);
    partial void OnIDcomicChanged();
    partial void OncreatedChanging(System.Nullable<System.DateTime> value);
    partial void OncreatedChanged();
    partial void OnupdateChanging(System.Nullable<System.DateTime> value);
    partial void OnupdateChanged();
    partial void OnImageLinkChanging(string value);
    partial void OnImageLinkChanged();
    #endregion
		
		public Chapter()
		{
			this._ImageChapters = new EntitySet<ImageChapter>(new Action<ImageChapter>(this.attach_ImageChapters), new Action<ImageChapter>(this.detach_ImageChapters));
			this._Comic = default(EntityRef<Comic>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDchapter", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string IDchapter
		{
			get
			{
				return this._IDchapter;
			}
			set
			{
				if ((this._IDchapter != value))
				{
					this.OnIDchapterChanging(value);
					this.SendPropertyChanging();
					this._IDchapter = value;
					this.SendPropertyChanged("IDchapter");
					this.OnIDchapterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="chapter", Storage="_chapter1", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string chapter1
		{
			get
			{
				return this._chapter1;
			}
			set
			{
				if ((this._chapter1 != value))
				{
					this.Onchapter1Changing(value);
					this.SendPropertyChanging();
					this._chapter1 = value;
					this.SendPropertyChanged("chapter1");
					this.Onchapter1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDcomic", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string IDcomic
		{
			get
			{
				return this._IDcomic;
			}
			set
			{
				if ((this._IDcomic != value))
				{
					if (this._Comic.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDcomicChanging(value);
					this.SendPropertyChanging();
					this._IDcomic = value;
					this.SendPropertyChanged("IDcomic");
					this.OnIDcomicChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_created", DbType="DateTime")]
		public System.Nullable<System.DateTime> created
		{
			get
			{
				return this._created;
			}
			set
			{
				if ((this._created != value))
				{
					this.OncreatedChanging(value);
					this.SendPropertyChanging();
					this._created = value;
					this.SendPropertyChanged("created");
					this.OncreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[update]", Storage="_update", DbType="DateTime")]
		public System.Nullable<System.DateTime> update
		{
			get
			{
				return this._update;
			}
			set
			{
				if ((this._update != value))
				{
					this.OnupdateChanging(value);
					this.SendPropertyChanging();
					this._update = value;
					this.SendPropertyChanged("update");
					this.OnupdateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImageLink", DbType="VarChar(255)")]
		public string ImageLink
		{
			get
			{
				return this._ImageLink;
			}
			set
			{
				if ((this._ImageLink != value))
				{
					this.OnImageLinkChanging(value);
					this.SendPropertyChanging();
					this._ImageLink = value;
					this.SendPropertyChanged("ImageLink");
					this.OnImageLinkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Chapter_ImageChapter", Storage="_ImageChapters", ThisKey="IDchapter", OtherKey="IDchapter")]
		public EntitySet<ImageChapter> ImageChapters
		{
			get
			{
				return this._ImageChapters;
			}
			set
			{
				this._ImageChapters.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Comic_Chapter", Storage="_Comic", ThisKey="IDcomic", OtherKey="IDcomic", IsForeignKey=true)]
		public Comic Comic
		{
			get
			{
				return this._Comic.Entity;
			}
			set
			{
				Comic previousValue = this._Comic.Entity;
				if (((previousValue != value) 
							|| (this._Comic.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Comic.Entity = null;
						previousValue.Chapters.Remove(this);
					}
					this._Comic.Entity = value;
					if ((value != null))
					{
						value.Chapters.Add(this);
						this._IDcomic = value.IDcomic;
					}
					else
					{
						this._IDcomic = default(string);
					}
					this.SendPropertyChanged("Comic");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ImageChapters(ImageChapter entity)
		{
			this.SendPropertyChanging();
			entity.Chapter = this;
		}
		
		private void detach_ImageChapters(ImageChapter entity)
		{
			this.SendPropertyChanging();
			entity.Chapter = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Comic")]
	public partial class Comic : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _IDcomic;
		
		private string _comic1;
		
		private System.DateTime _created;
		
		private System.DateTime _updated;
		
		private System.Nullable<int> _ratting;
		
		private System.Nullable<int> _views;
		
		private System.Nullable<int> _share;
		
		private string _IDauthor;
		
		private string _status;
		
		private string _description;
		
		private string _ImageLink;
		
		private EntitySet<Chapter> _Chapters;
		
		private EntitySet<ComicCatergory> _ComicCatergories;
		
		private EntitySet<ComicTran> _ComicTrans;
		
		private EntityRef<Author> _Author;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDcomicChanging(string value);
    partial void OnIDcomicChanged();
    partial void Oncomic1Changing(string value);
    partial void Oncomic1Changed();
    partial void OncreatedChanging(System.DateTime value);
    partial void OncreatedChanged();
    partial void OnupdatedChanging(System.DateTime value);
    partial void OnupdatedChanged();
    partial void OnrattingChanging(System.Nullable<int> value);
    partial void OnrattingChanged();
    partial void OnviewsChanging(System.Nullable<int> value);
    partial void OnviewsChanged();
    partial void OnshareChanging(System.Nullable<int> value);
    partial void OnshareChanged();
    partial void OnIDauthorChanging(string value);
    partial void OnIDauthorChanged();
    partial void OnstatusChanging(string value);
    partial void OnstatusChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OnImageLinkChanging(string value);
    partial void OnImageLinkChanged();
    #endregion
		
		public Comic()
		{
			this._Chapters = new EntitySet<Chapter>(new Action<Chapter>(this.attach_Chapters), new Action<Chapter>(this.detach_Chapters));
			this._ComicCatergories = new EntitySet<ComicCatergory>(new Action<ComicCatergory>(this.attach_ComicCatergories), new Action<ComicCatergory>(this.detach_ComicCatergories));
			this._ComicTrans = new EntitySet<ComicTran>(new Action<ComicTran>(this.attach_ComicTrans), new Action<ComicTran>(this.detach_ComicTrans));
			this._Author = default(EntityRef<Author>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDcomic", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string IDcomic
		{
			get
			{
				return this._IDcomic;
			}
			set
			{
				if ((this._IDcomic != value))
				{
					this.OnIDcomicChanging(value);
					this.SendPropertyChanging();
					this._IDcomic = value;
					this.SendPropertyChanged("IDcomic");
					this.OnIDcomicChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="comic", Storage="_comic1", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string comic1
		{
			get
			{
				return this._comic1;
			}
			set
			{
				if ((this._comic1 != value))
				{
					this.Oncomic1Changing(value);
					this.SendPropertyChanging();
					this._comic1 = value;
					this.SendPropertyChanged("comic1");
					this.Oncomic1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_created", DbType="DateTime NOT NULL")]
		public System.DateTime created
		{
			get
			{
				return this._created;
			}
			set
			{
				if ((this._created != value))
				{
					this.OncreatedChanging(value);
					this.SendPropertyChanging();
					this._created = value;
					this.SendPropertyChanged("created");
					this.OncreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_updated", DbType="DateTime NOT NULL")]
		public System.DateTime updated
		{
			get
			{
				return this._updated;
			}
			set
			{
				if ((this._updated != value))
				{
					this.OnupdatedChanging(value);
					this.SendPropertyChanging();
					this._updated = value;
					this.SendPropertyChanged("updated");
					this.OnupdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ratting", DbType="Int")]
		public System.Nullable<int> ratting
		{
			get
			{
				return this._ratting;
			}
			set
			{
				if ((this._ratting != value))
				{
					this.OnrattingChanging(value);
					this.SendPropertyChanging();
					this._ratting = value;
					this.SendPropertyChanged("ratting");
					this.OnrattingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_views", DbType="Int")]
		public System.Nullable<int> views
		{
			get
			{
				return this._views;
			}
			set
			{
				if ((this._views != value))
				{
					this.OnviewsChanging(value);
					this.SendPropertyChanging();
					this._views = value;
					this.SendPropertyChanged("views");
					this.OnviewsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_share", DbType="Int")]
		public System.Nullable<int> share
		{
			get
			{
				return this._share;
			}
			set
			{
				if ((this._share != value))
				{
					this.OnshareChanging(value);
					this.SendPropertyChanging();
					this._share = value;
					this.SendPropertyChanged("share");
					this.OnshareChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDauthor", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string IDauthor
		{
			get
			{
				return this._IDauthor;
			}
			set
			{
				if ((this._IDauthor != value))
				{
					if (this._Author.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDauthorChanging(value);
					this.SendPropertyChanging();
					this._IDauthor = value;
					this.SendPropertyChanged("IDauthor");
					this.OnIDauthorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="NVarChar(255)")]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImageLink", DbType="VarChar(255)")]
		public string ImageLink
		{
			get
			{
				return this._ImageLink;
			}
			set
			{
				if ((this._ImageLink != value))
				{
					this.OnImageLinkChanging(value);
					this.SendPropertyChanging();
					this._ImageLink = value;
					this.SendPropertyChanged("ImageLink");
					this.OnImageLinkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Comic_Chapter", Storage="_Chapters", ThisKey="IDcomic", OtherKey="IDcomic")]
		public EntitySet<Chapter> Chapters
		{
			get
			{
				return this._Chapters;
			}
			set
			{
				this._Chapters.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Comic_ComicCatergory", Storage="_ComicCatergories", ThisKey="IDcomic", OtherKey="IDcomic")]
		public EntitySet<ComicCatergory> ComicCatergories
		{
			get
			{
				return this._ComicCatergories;
			}
			set
			{
				this._ComicCatergories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Comic_ComicTran", Storage="_ComicTrans", ThisKey="IDcomic", OtherKey="IDcomic")]
		public EntitySet<ComicTran> ComicTrans
		{
			get
			{
				return this._ComicTrans;
			}
			set
			{
				this._ComicTrans.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Author_Comic", Storage="_Author", ThisKey="IDauthor", OtherKey="IDauthor", IsForeignKey=true)]
		public Author Author
		{
			get
			{
				return this._Author.Entity;
			}
			set
			{
				Author previousValue = this._Author.Entity;
				if (((previousValue != value) 
							|| (this._Author.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Author.Entity = null;
						previousValue.Comics.Remove(this);
					}
					this._Author.Entity = value;
					if ((value != null))
					{
						value.Comics.Add(this);
						this._IDauthor = value.IDauthor;
					}
					else
					{
						this._IDauthor = default(string);
					}
					this.SendPropertyChanged("Author");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Chapters(Chapter entity)
		{
			this.SendPropertyChanging();
			entity.Comic = this;
		}
		
		private void detach_Chapters(Chapter entity)
		{
			this.SendPropertyChanging();
			entity.Comic = null;
		}
		
		private void attach_ComicCatergories(ComicCatergory entity)
		{
			this.SendPropertyChanging();
			entity.Comic = this;
		}
		
		private void detach_ComicCatergories(ComicCatergory entity)
		{
			this.SendPropertyChanging();
			entity.Comic = null;
		}
		
		private void attach_ComicTrans(ComicTran entity)
		{
			this.SendPropertyChanging();
			entity.Comic = this;
		}
		
		private void detach_ComicTrans(ComicTran entity)
		{
			this.SendPropertyChanging();
			entity.Comic = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ComicCatergory")]
	public partial class ComicCatergory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _id;
		
		private string _IDcatergory;
		
		private string _IDcomic;
		
		private EntityRef<Catergory> _Catergory;
		
		private EntityRef<Comic> _Comic;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(string value);
    partial void OnidChanged();
    partial void OnIDcatergoryChanging(string value);
    partial void OnIDcatergoryChanged();
    partial void OnIDcomicChanging(string value);
    partial void OnIDcomicChanged();
    #endregion
		
		public ComicCatergory()
		{
			this._Catergory = default(EntityRef<Catergory>);
			this._Comic = default(EntityRef<Comic>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDcatergory", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string IDcatergory
		{
			get
			{
				return this._IDcatergory;
			}
			set
			{
				if ((this._IDcatergory != value))
				{
					if (this._Catergory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDcatergoryChanging(value);
					this.SendPropertyChanging();
					this._IDcatergory = value;
					this.SendPropertyChanged("IDcatergory");
					this.OnIDcatergoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDcomic", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string IDcomic
		{
			get
			{
				return this._IDcomic;
			}
			set
			{
				if ((this._IDcomic != value))
				{
					if (this._Comic.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDcomicChanging(value);
					this.SendPropertyChanging();
					this._IDcomic = value;
					this.SendPropertyChanged("IDcomic");
					this.OnIDcomicChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Catergory_ComicCatergory", Storage="_Catergory", ThisKey="IDcatergory", OtherKey="IDcatergory", IsForeignKey=true)]
		public Catergory Catergory
		{
			get
			{
				return this._Catergory.Entity;
			}
			set
			{
				Catergory previousValue = this._Catergory.Entity;
				if (((previousValue != value) 
							|| (this._Catergory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Catergory.Entity = null;
						previousValue.ComicCatergories.Remove(this);
					}
					this._Catergory.Entity = value;
					if ((value != null))
					{
						value.ComicCatergories.Add(this);
						this._IDcatergory = value.IDcatergory;
					}
					else
					{
						this._IDcatergory = default(string);
					}
					this.SendPropertyChanged("Catergory");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Comic_ComicCatergory", Storage="_Comic", ThisKey="IDcomic", OtherKey="IDcomic", IsForeignKey=true)]
		public Comic Comic
		{
			get
			{
				return this._Comic.Entity;
			}
			set
			{
				Comic previousValue = this._Comic.Entity;
				if (((previousValue != value) 
							|| (this._Comic.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Comic.Entity = null;
						previousValue.ComicCatergories.Remove(this);
					}
					this._Comic.Entity = value;
					if ((value != null))
					{
						value.ComicCatergories.Add(this);
						this._IDcomic = value.IDcomic;
					}
					else
					{
						this._IDcomic = default(string);
					}
					this.SendPropertyChanged("Comic");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ComicTrans")]
	public partial class ComicTran : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _id;
		
		private string _IDcomic;
		
		private string _IDteam;
		
		private EntityRef<Comic> _Comic;
		
		private EntityRef<TransTeam> _TransTeam;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(string value);
    partial void OnidChanged();
    partial void OnIDcomicChanging(string value);
    partial void OnIDcomicChanged();
    partial void OnIDteamChanging(string value);
    partial void OnIDteamChanged();
    #endregion
		
		public ComicTran()
		{
			this._Comic = default(EntityRef<Comic>);
			this._TransTeam = default(EntityRef<TransTeam>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDcomic", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string IDcomic
		{
			get
			{
				return this._IDcomic;
			}
			set
			{
				if ((this._IDcomic != value))
				{
					if (this._Comic.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDcomicChanging(value);
					this.SendPropertyChanging();
					this._IDcomic = value;
					this.SendPropertyChanged("IDcomic");
					this.OnIDcomicChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDteam", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string IDteam
		{
			get
			{
				return this._IDteam;
			}
			set
			{
				if ((this._IDteam != value))
				{
					if (this._TransTeam.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDteamChanging(value);
					this.SendPropertyChanging();
					this._IDteam = value;
					this.SendPropertyChanged("IDteam");
					this.OnIDteamChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Comic_ComicTran", Storage="_Comic", ThisKey="IDcomic", OtherKey="IDcomic", IsForeignKey=true)]
		public Comic Comic
		{
			get
			{
				return this._Comic.Entity;
			}
			set
			{
				Comic previousValue = this._Comic.Entity;
				if (((previousValue != value) 
							|| (this._Comic.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Comic.Entity = null;
						previousValue.ComicTrans.Remove(this);
					}
					this._Comic.Entity = value;
					if ((value != null))
					{
						value.ComicTrans.Add(this);
						this._IDcomic = value.IDcomic;
					}
					else
					{
						this._IDcomic = default(string);
					}
					this.SendPropertyChanged("Comic");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TransTeam_ComicTran", Storage="_TransTeam", ThisKey="IDteam", OtherKey="IDteam", IsForeignKey=true)]
		public TransTeam TransTeam
		{
			get
			{
				return this._TransTeam.Entity;
			}
			set
			{
				TransTeam previousValue = this._TransTeam.Entity;
				if (((previousValue != value) 
							|| (this._TransTeam.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TransTeam.Entity = null;
						previousValue.ComicTrans.Remove(this);
					}
					this._TransTeam.Entity = value;
					if ((value != null))
					{
						value.ComicTrans.Add(this);
						this._IDteam = value.IDteam;
					}
					else
					{
						this._IDteam = default(string);
					}
					this.SendPropertyChanged("TransTeam");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ImageChapter")]
	public partial class ImageChapter : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _IDchapter;
		
		private string _ImageLink;
		
		private int _IDimagechapter;
		
		private EntityRef<Chapter> _Chapter;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDchapterChanging(string value);
    partial void OnIDchapterChanged();
    partial void OnImageLinkChanging(string value);
    partial void OnImageLinkChanged();
    partial void OnIDimagechapterChanging(int value);
    partial void OnIDimagechapterChanged();
    #endregion
		
		public ImageChapter()
		{
			this._Chapter = default(EntityRef<Chapter>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDchapter", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string IDchapter
		{
			get
			{
				return this._IDchapter;
			}
			set
			{
				if ((this._IDchapter != value))
				{
					if (this._Chapter.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDchapterChanging(value);
					this.SendPropertyChanging();
					this._IDchapter = value;
					this.SendPropertyChanged("IDchapter");
					this.OnIDchapterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImageLink", DbType="VarChar(255)")]
		public string ImageLink
		{
			get
			{
				return this._ImageLink;
			}
			set
			{
				if ((this._ImageLink != value))
				{
					this.OnImageLinkChanging(value);
					this.SendPropertyChanging();
					this._ImageLink = value;
					this.SendPropertyChanged("ImageLink");
					this.OnImageLinkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDimagechapter", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDimagechapter
		{
			get
			{
				return this._IDimagechapter;
			}
			set
			{
				if ((this._IDimagechapter != value))
				{
					this.OnIDimagechapterChanging(value);
					this.SendPropertyChanging();
					this._IDimagechapter = value;
					this.SendPropertyChanged("IDimagechapter");
					this.OnIDimagechapterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Chapter_ImageChapter", Storage="_Chapter", ThisKey="IDchapter", OtherKey="IDchapter", IsForeignKey=true)]
		public Chapter Chapter
		{
			get
			{
				return this._Chapter.Entity;
			}
			set
			{
				Chapter previousValue = this._Chapter.Entity;
				if (((previousValue != value) 
							|| (this._Chapter.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Chapter.Entity = null;
						previousValue.ImageChapters.Remove(this);
					}
					this._Chapter.Entity = value;
					if ((value != null))
					{
						value.ImageChapters.Add(this);
						this._IDchapter = value.IDchapter;
					}
					else
					{
						this._IDchapter = default(string);
					}
					this.SendPropertyChanged("Chapter");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Permission")]
	public partial class Permission : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _IDper;
		
		private bool _permission1;
		
		private EntitySet<PermissionUser> _PermissionUsers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDperChanging(string value);
    partial void OnIDperChanged();
    partial void Onpermission1Changing(bool value);
    partial void Onpermission1Changed();
    #endregion
		
		public Permission()
		{
			this._PermissionUsers = new EntitySet<PermissionUser>(new Action<PermissionUser>(this.attach_PermissionUsers), new Action<PermissionUser>(this.detach_PermissionUsers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDper", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string IDper
		{
			get
			{
				return this._IDper;
			}
			set
			{
				if ((this._IDper != value))
				{
					this.OnIDperChanging(value);
					this.SendPropertyChanging();
					this._IDper = value;
					this.SendPropertyChanged("IDper");
					this.OnIDperChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="permission", Storage="_permission1", DbType="Bit NOT NULL")]
		public bool permission1
		{
			get
			{
				return this._permission1;
			}
			set
			{
				if ((this._permission1 != value))
				{
					this.Onpermission1Changing(value);
					this.SendPropertyChanging();
					this._permission1 = value;
					this.SendPropertyChanged("permission1");
					this.Onpermission1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Permission_PermissionUser", Storage="_PermissionUsers", ThisKey="IDper", OtherKey="IDper")]
		public EntitySet<PermissionUser> PermissionUsers
		{
			get
			{
				return this._PermissionUsers;
			}
			set
			{
				this._PermissionUsers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PermissionUsers(PermissionUser entity)
		{
			this.SendPropertyChanging();
			entity.Permission = this;
		}
		
		private void detach_PermissionUsers(PermissionUser entity)
		{
			this.SendPropertyChanging();
			entity.Permission = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PermissionUser")]
	public partial class PermissionUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _id;
		
		private string _IDuser;
		
		private string _IDper;
		
		private EntityRef<Permission> _Permission;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(string value);
    partial void OnidChanged();
    partial void OnIDuserChanging(string value);
    partial void OnIDuserChanged();
    partial void OnIDperChanging(string value);
    partial void OnIDperChanged();
    #endregion
		
		public PermissionUser()
		{
			this._Permission = default(EntityRef<Permission>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDuser", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string IDuser
		{
			get
			{
				return this._IDuser;
			}
			set
			{
				if ((this._IDuser != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDuserChanging(value);
					this.SendPropertyChanging();
					this._IDuser = value;
					this.SendPropertyChanged("IDuser");
					this.OnIDuserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDper", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string IDper
		{
			get
			{
				return this._IDper;
			}
			set
			{
				if ((this._IDper != value))
				{
					if (this._Permission.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDperChanging(value);
					this.SendPropertyChanging();
					this._IDper = value;
					this.SendPropertyChanged("IDper");
					this.OnIDperChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Permission_PermissionUser", Storage="_Permission", ThisKey="IDper", OtherKey="IDper", IsForeignKey=true)]
		public Permission Permission
		{
			get
			{
				return this._Permission.Entity;
			}
			set
			{
				Permission previousValue = this._Permission.Entity;
				if (((previousValue != value) 
							|| (this._Permission.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Permission.Entity = null;
						previousValue.PermissionUsers.Remove(this);
					}
					this._Permission.Entity = value;
					if ((value != null))
					{
						value.PermissionUsers.Add(this);
						this._IDper = value.IDper;
					}
					else
					{
						this._IDper = default(string);
					}
					this.SendPropertyChanged("Permission");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_PermissionUser", Storage="_User", ThisKey="IDuser", OtherKey="IDuser", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.PermissionUsers.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.PermissionUsers.Add(this);
						this._IDuser = value.IDuser;
					}
					else
					{
						this._IDuser = default(string);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TransPermission")]
	public partial class TransPermission : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _IDtransper;
		
		private string _transperName;
		
		private EntitySet<User> _Users;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDtransperChanging(string value);
    partial void OnIDtransperChanged();
    partial void OntransperNameChanging(string value);
    partial void OntransperNameChanged();
    #endregion
		
		public TransPermission()
		{
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDtransper", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string IDtransper
		{
			get
			{
				return this._IDtransper;
			}
			set
			{
				if ((this._IDtransper != value))
				{
					this.OnIDtransperChanging(value);
					this.SendPropertyChanging();
					this._IDtransper = value;
					this.SendPropertyChanged("IDtransper");
					this.OnIDtransperChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_transperName", DbType="NVarChar(50)")]
		public string transperName
		{
			get
			{
				return this._transperName;
			}
			set
			{
				if ((this._transperName != value))
				{
					this.OntransperNameChanging(value);
					this.SendPropertyChanging();
					this._transperName = value;
					this.SendPropertyChanged("transperName");
					this.OntransperNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TransPermission_User", Storage="_Users", ThisKey="IDtransper", OtherKey="IDtransper")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.TransPermission = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.TransPermission = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TransTeam")]
	public partial class TransTeam : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _IDteam;
		
		private string _team;
		
		private System.Nullable<System.DateTime> _created;
		
		private EntitySet<User> _Users;
		
		private EntitySet<ComicTran> _ComicTrans;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDteamChanging(string value);
    partial void OnIDteamChanged();
    partial void OnteamChanging(string value);
    partial void OnteamChanged();
    partial void OncreatedChanging(System.Nullable<System.DateTime> value);
    partial void OncreatedChanged();
    #endregion
		
		public TransTeam()
		{
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			this._ComicTrans = new EntitySet<ComicTran>(new Action<ComicTran>(this.attach_ComicTrans), new Action<ComicTran>(this.detach_ComicTrans));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDteam", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string IDteam
		{
			get
			{
				return this._IDteam;
			}
			set
			{
				if ((this._IDteam != value))
				{
					this.OnIDteamChanging(value);
					this.SendPropertyChanging();
					this._IDteam = value;
					this.SendPropertyChanged("IDteam");
					this.OnIDteamChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_team", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string team
		{
			get
			{
				return this._team;
			}
			set
			{
				if ((this._team != value))
				{
					this.OnteamChanging(value);
					this.SendPropertyChanging();
					this._team = value;
					this.SendPropertyChanged("team");
					this.OnteamChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_created", DbType="DateTime")]
		public System.Nullable<System.DateTime> created
		{
			get
			{
				return this._created;
			}
			set
			{
				if ((this._created != value))
				{
					this.OncreatedChanging(value);
					this.SendPropertyChanging();
					this._created = value;
					this.SendPropertyChanged("created");
					this.OncreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TransTeam_User", Storage="_Users", ThisKey="IDteam", OtherKey="IDteam")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TransTeam_ComicTran", Storage="_ComicTrans", ThisKey="IDteam", OtherKey="IDteam")]
		public EntitySet<ComicTran> ComicTrans
		{
			get
			{
				return this._ComicTrans;
			}
			set
			{
				this._ComicTrans.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.TransTeam = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.TransTeam = null;
		}
		
		private void attach_ComicTrans(ComicTran entity)
		{
			this.SendPropertyChanging();
			entity.TransTeam = this;
		}
		
		private void detach_ComicTrans(ComicTran entity)
		{
			this.SendPropertyChanging();
			entity.TransTeam = null;
		}
	}
}
#pragma warning restore 1591
